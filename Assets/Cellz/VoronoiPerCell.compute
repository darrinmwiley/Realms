// VoronoiPerCell.compute
#pragma kernel CSPerCell

// ——— Global UAV/SRV/uniform defs ———

// Where we write the winning cell’s ID
RWTexture2D<uint>        IDResult;

// List of neighbors: (center.x, center.y, invRadius, unused)
StructuredBuffer<float4> Neighbors;
int                      neighborCount;

// Per-cell parameters
uint                     cellID;
float4                   cellCenter;  // .xy = world-space center
float                    invRadius;   // = 1.0 / outerRadius

// Pixel bounds for this dispatch
int2                     minPixel;    // inclusive
int2                     maxPixel;    // exclusive

// Mapping from pixel → world
float                    invW;        // = texWidth  / worldWidth
float                    invH;        // = texHeight / worldHeight
float                    originX;     // world X of pixel (0,0)
float                    originY;     // world Y of pixel (0,0)

// Must match your C# threadGroupSize (e.g. 8×8)
[numthreads(8, 8, 1)]
void CSPerCell(uint3 pid : SV_DispatchThreadID)
{
    // 1) Compute absolute pixel coords
    int px = minPixel.x + pid.x;
    int py = minPixel.y + pid.y;
    if (px >= maxPixel.x || py >= maxPixel.y) return;

    // 2) Reconstruct world-space position of this pixel
    float worldX = (px / invW) + originX;
    float worldY = (py / invH) + originY;

    // 3) Test against this cell’s circle
    float2 d = float2(worldX, worldY) - cellCenter.xy;
    float frac = dot(d, d) * (invRadius * invRadius);
    if (frac > 1.0) return;

    // 4) Cull by any closer neighbour
    for (int i = 0; i < neighborCount; i++)
    {
        float4 n = Neighbors[i];
        float2 nd = float2(worldX, worldY) - n.xy;
        if (dot(nd, nd) * (n.z * n.z) < frac)
            return;
    }

    // 5) We win → write our cellID
    IDResult[uint2(px, py)] = cellID;
}
